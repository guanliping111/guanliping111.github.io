(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{416:function(o,r,t){"use strict";t.r(r);var e=t(30),a=Object(e.a)({},(function(){var o=this,r=o.$createElement,t=o._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[t("h2",{attrs:{id:"for-in-和-for-of-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-in-和-for-of-的区别"}},[o._v("#")]),o._v(" for in 和 for of 的区别")]),o._v(" "),t("h3",{attrs:{id:"for-in-主要用于遍历对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-in-主要用于遍历对象"}},[o._v("#")]),o._v(" for-in  主要用于遍历对象")]),o._v(" "),t("ul",[t("li",[t("p",[o._v("以顺序遍历一个对象的除 "),t("code",[o._v("symbol")]),o._v(" 以外的可枚举属性")])]),o._v(" "),t("li",[t("p",[o._v("格式："),t("code",[o._v("for(key in object)")])]),o._v(" "),t("p",[t("code",[o._v("key")]),o._v(" 是每一个键值对的键 ， "),t("code",[o._v("object")]),o._v("为循环对象")]),o._v(" "),t("p",[o._v("当我们需要取到对象里面的值时 "),t("code",[o._v("object[key]")])])])]),o._v(" "),t("h3",{attrs:{id:"for-of-是遍历数据结构的统一方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for-of-是遍历数据结构的统一方法"}},[o._v("#")]),o._v(" for-of 是遍历数据结构的统一方法")]),o._v(" "),t("ul",[t("li",[o._v("一个数据结构只要部署了symbol.iterator属性，就被视为具有iterator接口，\n就可以用for...of循环逸历它的成员。")]),o._v(" "),t("li",[o._v("for. ..of循环内部调用的是数据结构的Symbol.iterator方法")])])])}),[],!1,null,null,null);r.default=a.exports}}]);